\hypertarget{class_controller}{}\section{Controller Class Reference}
\label{class_controller}\index{Controller@{Controller}}


\hyperlink{class_controller}{Controller} is used to control the pod and will provide for an interface to make everything work.  




{\ttfamily \#include $<$Controller.\+h$>$}



Collaboration diagram for Controller\+:
% FIG 0
\subsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\hyperlink{class_controller_ae9b318779cd66bba433238054b8c64a4}{Controller} (const unsigned long band\+\_\+rate)
\item 
\hyperlink{class_controller_a0ab87934c4f7a266cfdb86e0f36bc1b5}{$\sim$\+Controller} ()
\item 
void \hyperlink{class_controller_aaff2c0ac01c4d7a6b78718ac8a411c4b}{setup} ()
\item 
void \hyperlink{class_controller_af1fbb94f21eb0601126b14349fa49294}{handle\+Commands} ()
\item 
void \hyperlink{class_controller_a018a5dbae5b2f28fd65a4ebfa1c1ba13}{control} ()
\end{DoxyCompactItemize}
\subsection*{Private Member Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{class_controller_af9cb9dacdc34443221b21ee9d6be7549}{read\+Command} ()
\item 
void \hyperlink{class_controller_aadb7ac5a7709c9d18d7e0bcc67bde5db}{parse\+Command} (String command)
\item 
void \hyperlink{class_controller_a290be619c2e973b2d1c78d50c8125df5}{emergency\+Protocol} ()
\item 
void \hyperlink{class_controller_a28c18ac5bf6ca7f6ea6ac70ad42cb24d}{handle\+Manual} ()
\item 
void \hyperlink{class_controller_a472269f67c81e0300446310b68bbd2d3}{handle\+Script} ()
\item 
void \hyperlink{class_controller_a11dc901b92d8dc082cf9a5e6a0617c4a}{handle\+Autonomous} ()
\end{DoxyCompactItemize}
\subsection*{Private Attributes}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{class_controller_a89b2557ac09f4f69072d2bc92783ba27}\label{class_controller_a89b2557ac09f4f69072d2bc92783ba27}} 
const unsigned long {\bfseries band\+\_\+rate}
\item 
const int \hyperlink{class_controller_a5dc336008413ea41127c35433ddb0a5c}{max\+\_\+char} = 30
\item 
\mbox{\Hypertarget{class_controller_ac646097693f643bafe9abfe72242c95f}\label{class_controller_ac646097693f643bafe9abfe72242c95f}} 
char $\ast$ {\bfseries received\+\_\+chars}
\item 
\mbox{\Hypertarget{class_controller_a77cb6176258765bd019e6ace99a0294a}\label{class_controller_a77cb6176258765bd019e6ace99a0294a}} 
bool {\bfseries new\+\_\+data} = false
\item 
\mbox{\Hypertarget{class_controller_a00cc042a5e81aff2fc6324cc6babca3c}\label{class_controller_a00cc042a5e81aff2fc6324cc6babca3c}} 
bool {\bfseries reading} = false
\item 
\mbox{\Hypertarget{class_controller_a8c6b4b6bcfa473514e1d62abfd4dfee7}\label{class_controller_a8c6b4b6bcfa473514e1d62abfd4dfee7}} 
int {\bfseries char\+\_\+index} = 0
\item 
char \hyperlink{class_controller_a2c3ddfae9a818827a9fcb17ea6338a43}{start\+\_\+marker} = \textquotesingle{}\{\textquotesingle{}
\item 
char \hyperlink{class_controller_a4df4acb1afd60491caaa6eb1d056ded7}{end\+\_\+marker} = \textquotesingle{}\}\textquotesingle{}
\item 
\mbox{\Hypertarget{class_controller_a58930fea277aa5b5bf15fe76bb378475}\label{class_controller_a58930fea277aa5b5bf15fe76bb378475}} 
\hyperlink{class_state}{State} {\bfseries s}
\end{DoxyCompactItemize}


\subsection{Detailed Description}
\hyperlink{class_controller}{Controller} is used to control the pod and will provide for an interface to make everything work. 

\begin{DoxyAuthor}{Author}
Deep Dhillon 
\end{DoxyAuthor}
\begin{DoxyDate}{Date}
2017-\/06-\/25 
\end{DoxyDate}


\subsection{Constructor \& Destructor Documentation}
\mbox{\Hypertarget{class_controller_ae9b318779cd66bba433238054b8c64a4}\label{class_controller_ae9b318779cd66bba433238054b8c64a4}} 
\index{Controller@{Controller}!Controller@{Controller}}
\index{Controller@{Controller}!Controller@{Controller}}
\subsubsection{\texorpdfstring{Controller()}{Controller()}}
{\footnotesize\ttfamily Controller\+::\+Controller (\begin{DoxyParamCaption}\item[{const unsigned long}]{band\+\_\+rate }\end{DoxyParamCaption})}

The only constructor for this class. It uses bit rate to determine the data flow rate of Serial connection 
\begin{DoxyParams}{Parameters}
{\em band\+\_\+rate} & bit rate of Serial connection \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{class_controller_a0ab87934c4f7a266cfdb86e0f36bc1b5}\label{class_controller_a0ab87934c4f7a266cfdb86e0f36bc1b5}} 
\index{Controller@{Controller}!````~Controller@{$\sim$\+Controller}}
\index{````~Controller@{$\sim$\+Controller}!Controller@{Controller}}
\subsubsection{\texorpdfstring{$\sim$\+Controller()}{~Controller()}}
{\footnotesize\ttfamily Controller\+::$\sim$\+Controller (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

Destructor deletes all the subsystems on the pod when Control goes off the scope 

\subsection{Member Function Documentation}
\mbox{\Hypertarget{class_controller_a018a5dbae5b2f28fd65a4ebfa1c1ba13}\label{class_controller_a018a5dbae5b2f28fd65a4ebfa1c1ba13}} 
\index{Controller@{Controller}!control@{control}}
\index{control@{control}!Controller@{Controller}}
\subsubsection{\texorpdfstring{control()}{control()}}
{\footnotesize\ttfamily void Controller\+::control (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

This method acts as a loop that controls the working of the pod. It handles various function modes like\+: Autonomous, Manual and Script \mbox{\Hypertarget{class_controller_a290be619c2e973b2d1c78d50c8125df5}\label{class_controller_a290be619c2e973b2d1c78d50c8125df5}} 
\index{Controller@{Controller}!emergency\+Protocol@{emergency\+Protocol}}
\index{emergency\+Protocol@{emergency\+Protocol}!Controller@{Controller}}
\subsubsection{\texorpdfstring{emergency\+Protocol()}{emergencyProtocol()}}
{\footnotesize\ttfamily void Controller\+::emergency\+Protocol (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}

Handles the case when there is emergency and an action has to be taken. This has the top most priority and is executed as quickly as possible \mbox{\Hypertarget{class_controller_a11dc901b92d8dc082cf9a5e6a0617c4a}\label{class_controller_a11dc901b92d8dc082cf9a5e6a0617c4a}} 
\index{Controller@{Controller}!handle\+Autonomous@{handle\+Autonomous}}
\index{handle\+Autonomous@{handle\+Autonomous}!Controller@{Controller}}
\subsubsection{\texorpdfstring{handle\+Autonomous()}{handleAutonomous()}}
{\footnotesize\ttfamily void Controller\+::handle\+Autonomous (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}

Handles all the manual controls for the pod. This allows us to manually adjust various features of the pod from the control panel \mbox{\Hypertarget{class_controller_af1fbb94f21eb0601126b14349fa49294}\label{class_controller_af1fbb94f21eb0601126b14349fa49294}} 
\index{Controller@{Controller}!handle\+Commands@{handle\+Commands}}
\index{handle\+Commands@{handle\+Commands}!Controller@{Controller}}
\subsubsection{\texorpdfstring{handle\+Commands()}{handleCommands()}}
{\footnotesize\ttfamily void Controller\+::handle\+Commands (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

This method is in charge of handling and parsing commands received from Serial. It calls other methods to do it\textquotesingle{}s tasks \mbox{\Hypertarget{class_controller_a28c18ac5bf6ca7f6ea6ac70ad42cb24d}\label{class_controller_a28c18ac5bf6ca7f6ea6ac70ad42cb24d}} 
\index{Controller@{Controller}!handle\+Manual@{handle\+Manual}}
\index{handle\+Manual@{handle\+Manual}!Controller@{Controller}}
\subsubsection{\texorpdfstring{handle\+Manual()}{handleManual()}}
{\footnotesize\ttfamily void Controller\+::handle\+Manual (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}

Handles all the manual controls for the pod. This allows us to manually adjust various features of the pod from the control panel \mbox{\Hypertarget{class_controller_a472269f67c81e0300446310b68bbd2d3}\label{class_controller_a472269f67c81e0300446310b68bbd2d3}} 
\index{Controller@{Controller}!handle\+Script@{handle\+Script}}
\index{handle\+Script@{handle\+Script}!Controller@{Controller}}
\subsubsection{\texorpdfstring{handle\+Script()}{handleScript()}}
{\footnotesize\ttfamily void Controller\+::handle\+Script (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}

Allows us to run a script when we need to test something. The code will keep executing what is defined in this function \mbox{\Hypertarget{class_controller_aadb7ac5a7709c9d18d7e0bcc67bde5db}\label{class_controller_aadb7ac5a7709c9d18d7e0bcc67bde5db}} 
\index{Controller@{Controller}!parse\+Command@{parse\+Command}}
\index{parse\+Command@{parse\+Command}!Controller@{Controller}}
\subsubsection{\texorpdfstring{parse\+Command()}{parseCommand()}}
{\footnotesize\ttfamily void Controller\+::parse\+Command (\begin{DoxyParamCaption}\item[{String}]{command }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}

Parses the command read from the Serial and signals for the change of the state based on that 
\begin{DoxyParams}{Parameters}
{\em json\+\_\+string} & a J\+S\+ON String representing the command \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A status based on success or failure 
\end{DoxyReturn}
\mbox{\Hypertarget{class_controller_af9cb9dacdc34443221b21ee9d6be7549}\label{class_controller_af9cb9dacdc34443221b21ee9d6be7549}} 
\index{Controller@{Controller}!read\+Command@{read\+Command}}
\index{read\+Command@{read\+Command}!Controller@{Controller}}
\subsubsection{\texorpdfstring{read\+Command()}{readCommand()}}
{\footnotesize\ttfamily void Controller\+::read\+Command (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}

Reading listener to keep listening for commands that are being passed through Serial \begin{DoxyReturn}{Returns}
A status based on success of failure 
\end{DoxyReturn}
\mbox{\Hypertarget{class_controller_aaff2c0ac01c4d7a6b78718ac8a411c4b}\label{class_controller_aaff2c0ac01c4d7a6b78718ac8a411c4b}} 
\index{Controller@{Controller}!setup@{setup}}
\index{setup@{setup}!Controller@{Controller}}
\subsubsection{\texorpdfstring{setup()}{setup()}}
{\footnotesize\ttfamily void Controller\+::setup (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

This method holds the code that will be run at the beginning. Is used for initializing various pod parts 

\subsection{Member Data Documentation}
\mbox{\Hypertarget{class_controller_a4df4acb1afd60491caaa6eb1d056ded7}\label{class_controller_a4df4acb1afd60491caaa6eb1d056ded7}} 
\index{Controller@{Controller}!end\+\_\+marker@{end\+\_\+marker}}
\index{end\+\_\+marker@{end\+\_\+marker}!Controller@{Controller}}
\subsubsection{\texorpdfstring{end\+\_\+marker}{end\_marker}}
{\footnotesize\ttfamily char Controller\+::end\+\_\+marker = \textquotesingle{}\}\textquotesingle{}\hspace{0.3cm}{\ttfamily [private]}}

Will only read commands that end with \} \mbox{\Hypertarget{class_controller_a5dc336008413ea41127c35433ddb0a5c}\label{class_controller_a5dc336008413ea41127c35433ddb0a5c}} 
\index{Controller@{Controller}!max\+\_\+char@{max\+\_\+char}}
\index{max\+\_\+char@{max\+\_\+char}!Controller@{Controller}}
\subsubsection{\texorpdfstring{max\+\_\+char}{max\_char}}
{\footnotesize\ttfamily const int Controller\+::max\+\_\+char = 30\hspace{0.3cm}{\ttfamily [private]}}

Maximum length of commands allowed \mbox{\Hypertarget{class_controller_a2c3ddfae9a818827a9fcb17ea6338a43}\label{class_controller_a2c3ddfae9a818827a9fcb17ea6338a43}} 
\index{Controller@{Controller}!start\+\_\+marker@{start\+\_\+marker}}
\index{start\+\_\+marker@{start\+\_\+marker}!Controller@{Controller}}
\subsubsection{\texorpdfstring{start\+\_\+marker}{start\_marker}}
{\footnotesize\ttfamily char Controller\+::start\+\_\+marker = \textquotesingle{}\{\textquotesingle{}\hspace{0.3cm}{\ttfamily [private]}}

Will only read commands that start with \{ 

The documentation for this class was generated from the following files\+:\begin{DoxyCompactItemize}
\item 
D\+:/git/waterloop\+\_\+projects/\+Control-\/\+Pod/src/\+Main/Controller.\+h\item 
D\+:/git/waterloop\+\_\+projects/\+Control-\/\+Pod/src/\+Main/Controller.\+cpp\end{DoxyCompactItemize}
